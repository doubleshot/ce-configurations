#!/bin/sh
#
# An inotify watch script integrated with Git, specialized for Kaltura platform.
#
# chkconfig:   - 91 11
# description: Starts and stops the onlooker service

### BEGIN INIT INFO
# Provides: onlooker
# Required-Start: $local_fs $network
# Required-Stop: $local_fs $network
# Default-Start: 
# Default-Stop: 0 1 2 3 4 5 6
# Short-Description: start and stop onlooker service
# Description: Onlooker is part of the Kaltura platform for tracking changed files     
### END INIT INFO

. /opt/kaltura/app/configurations/system.ini
. /etc/rc.d/init.d/functions

# Source function library.
prog="inotifywait"
dir1="Onlooker - /root"
exec1="nohup $APP_DIR/onlooker/inotifyroot.sh &>/dev/null &"
dir2="Onlooker - /opt"
exec2="nohup $APP_DIR/onlooker/inotifyopt.sh &>/dev/null &"
dir3="Onlooker - /etc"
exec3="nohup $APP_DIR/onlooker/inotifyetc.sh &>/dev/null &"
dir4="Onlooker - /home"
exec4="nohup $APP_DIR/onlooker/inotifyhome.sh &>/dev/null &"
count=1

start() {
    #echo -n $"Starting $prog: "
    #echo $name
 
    while [ $count -lt 5 ];do
    exec="\$exec$count"
    eval daemon $exec
    retval=$?
    name="\$dir$count"
    eval echo "Started $name"
    (( count++ ))
    done
}

stop() {
    echo -n $"Stopping Onlooker "
    killproc $prog
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status $prog
    #count=4
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        #rh_status_q && exit 0
        #$1
	start
        ;;
    stop)
        rh_status_q || exit 0
        $1
        #stop
        ;;
    restart)
        $1
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart}"
        exit 2
esac

#done

#exit $?

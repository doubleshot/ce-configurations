verify_user_input()
{
for VAL in HTTPD_BIN PHP_BIN TIME_ZONE BASE_DIR KALT_VER PENTAHO_DIR PENTAHO_VER PENTAHO_URL COMMON_DEPS KALTURA_FULL_VIRTUAL_HOST_NAME ADMIN_CONSOLE_ADMIN_MAIL ADMIN_CONSOLE_PASSWORD DB1_HOST DB1_PORT DB1_NAME DB1_USER DB1_PASS KALT_USER KALT_GROUP TEST_PARTNER_EMAIL TEST_PARTNER_PASSWD DB1_CREATE_NEW_DB RED5_INSTALL; do
	if [ -z "${!VAL}" ];then
		echo "I need $VAL in user_input.ini"
		exit 1
	fi
done
}
install_deps()
{
	yum -y install $COMMON_DEPS
	if ! rpm -q mysql-server 2>/dev/null;then
		echo "Do you plan on running MySQL DB on this instance? Note that it is not advised in cluster mode [y/N]"
		read YESNO
		if [ "$YESNO" = 'y' ];then
			yum -y install mysql-server
			echo "Setting lower_case_table_names = 1 in /etc/my.cnf.."
			sed -i 's@^\[mysqld\]$@[mysqld]\nlower_case_table_names = 1\n@' /etc/my.cnf
			/etc/init.d/mysqld restart
			mysql_secure_installation
		fi
	fi
}
setup_pentaho()
{
	if [ -d "$PENTAHO_DIR" ];then
		echo "$PENTAHO_DIR already exists"
	else
		rm -rf "$PENTAHO_DIR" 
		tar ztf $INSTALL_DIR/pdi-ce-$PENTAHO_VER-stable.tar.gz > /dev/null
		if [ $? -ne 0 ];then
		    echo "Archive does not exist or is corrupted."
		    rm $INSTALL_DIR/pdi-ce-$PENTAHO_VER-stable.tar.gz*
		    echo "Retrieving Pentaho.."
		    wget $PENTAHO_URL
		fi
		echo "Extracting Pentaho archive and copying to $PENTAHO_DIR/pdi.."
		tar zxf pdi-ce-$PENTAHO_VER-stable.tar.gz
		mkdir -p $PENTAHO_DIR && mv data-integration $PENTAHO_DIR/pdi
	fi
}
create_kalt_user()
{
	echo "Creating the kaltura user.."
	KALT_USER=kaltura
	KALT_GROUP=kaltura
	getent group $KALT_GROUP >/dev/null || groupadd -r $KALT_GROUP
	getent passwd $KALT_USER >/dev/null || useradd -r  -g $KALT_GROUP -s /sbin/nologin -d $BASE_DIR -c "Kaltura" $KALT_USER
}
host_base_configure()
{
	echo "Dest host?"
	read DEST_HOST
	DEST_DIR="/tmp/$DEST_HOST"
	cd $KALT_PREFIX
	find . -name tmp -o -name log -o -name cache -o -name logs -o -name entry|sed 's/^.\///g' >/tmp/excd_lst
	rsync -avzr --exclude-from /tmp/excd_lst . $DEST_DIR
	mkdir -p "$DEST_DIR"
	CURR_NODE_NAME=`grep cdn_host $KALT_PREFIX/app/configurations/local.ini -m1|awk -F '=' '{print $2}'|sed 's/\s*//g'`
	if [ -n "$CURR_NODE_NAME" ];then
		echo "We believe in the hostname in your curr installation is: $CURR_NODE_NAME. Do you wish to alter? [Y/n]"
		read ANS
	else
		echo "We could not find the hostname in your conf, would you like to input one manually? [Y/n]"
		read ANS
	fi
	if [ "$ANS" = 'Y' ];then
		echo "Input hostname: "
		read CURR_NODE_NAME
	fi
	if [ -z "$CURR_NODE_NAME" ];then
		echo "Come on guys, I need to know what host I should look for in the current config :("
		exit 1
	fi
	for i in `find $KALT_PREFIX/app -name "*template*ini"`;do 
		CONF=`echo $i|sed 's/_template//;s/.template//'` 
		if [ -r $CONF ];then 
			sed  "s@$CURR_NODE_NAME@$DEST_HOST@g" $CONF>  $APP_CONF_DIR/`basename $CONF`
		fi
	done
	fix_hostname_values
	cd $DEST_DIR
}

probe_for_garbage()
{
	if [ -d $BASE_DIR ];then
		echo "$BASE_DIR already exists. Remove and re-run me."
		exit 1
	fi
	KALT_PIDS=`ps fax|grep kaltura|grep -v grep |awk -F " " '{print $1}'|xargs`
	if [ -n "$KALT_PIDS" ];then
		echo -e "Following PIDs of old Kaltura proces are running: $KALT_PIDS\nKill them and re-run me.\n"
		exit 1
	fi
}

install_all_in_one()
{
	$DIR_NAME/auto_inst_falcon_centos.sh	
	cp $DIR_NAME/package/app/crontab/kaltura_crontab $BASE_DIR/crontab/kaltura_crontab.templ
}
	
create_common_runme()
{
cat >>runme.sh << EOF
echo "Creating the kaltura user.."
getent group kaltura >/dev/null || groupadd -r kaltura
getent passwd kaltura >/dev/null || useradd -r  -g kaltura -s /sbin/nologin -d $KALT_PREFIX -c "Kaltura" kaltura
EOF
echo "yum install -y $COMMON_DEPS" >>runme.sh

}
prompt_for_mysql_dsn()
{
	if [ "$DB1_HOST" = 'localhost' -o "$DB1_HOST" = '127.0.0.1' -o "$DB1_HOST" = `hostname` ];then
		echo "You are installing batch and you stated in $DIR_NAME/user_input.ini that your DB to be on the same machine, are you REALLY sure you mean this?"
		read ANS
		if [ "$ANS" != 'y' ];then
			echo "Your DB host?"
			read DB_HOSTNAME
			sed  -i "s@\(DB1_HOST\)=.*@\1=$DB_HOSTNAME@g" $DIR_NAME/user_input.ini
			echo "Your DB user? [$DB1_USER]"
			read DB_USER
			if [ -n "$DB_USER" ];then
				sed  -i "s@\(DB1_USER\)=.*@\1=$DB_USER@g" $DIR_NAME/user_input.ini
			fi
			echo "Your DB passwd? [$DB1_PASS]"
			read DB_PASSWD
			if [ -n "$DB_PASSWD" ];then
				sed  -i "s@\(DB1_PASS\)=.*@\1=$DB_USER@g" $DIR_NAME/user_input.ini
			fi
			echo "Your DB port? [$DB1_PORT]"
			read DB_PORT
			if [ -n "$DB_PORT" ];then
				sed  -i "s@\(DB1_PORT\)=.*@\1=$DB_PORT@g" $DIR_NAME/user_input.ini
			fi
			sed -i 's@\(DB1_CREATE_NEW_DB\)=y@\1=n@g' $DIR_NAME/user_input.ini
			. $DIR_NAME/user_input.ini
			
		fi
	fi
}

install_batch()
{
	install_all_in_one
	cd $BASE_DIR
	rm /etc/cron.d/dwh_crontab||true
	cp crontab/kaltura_crontab crontab/kaltura_crontab.bak.`date +%d_%m_%y`
	cp crontab/kaltura_crontab.templ crontab/kaltura_crontab
	sed -i "s%@BASE_DIR@%$BASE_DIR%g;s%@APP_DIR@%$BASE_DIR/app%g;s%@PHP_BIN@%$PHP_BIN%g;s%@LOG_DIR@%$BASE_DIR/log%g" crontab/kaltura_crontab
	for i in reportUsageTrackingIfOptIn.php watch.populate.sh dwh_plays_views_sync.sh send-usage-report.php;do  
		sed -i "s@\(.*$i.*\)@#commented out by $0 when configuring batch: \1@g" crontab/kaltura_crontab; 
	done
	for i in sphinx_watch.sh;do
		/etc/init.d/$i stop
		chkconfig $i off
	done 
	if [ "$DB1_HOST" != "localhost" ];then
		/etc/init.d/mysqld stop
		chkconfig mysqld off
	fi
	echo "I also need a scheduler ID?"           
	read SCD_ID                    
	sed -i "s@^\(id\s*=\s*\)1\$@\1 $SCD_ID@" $APP_CONF_DIR/batch.ini
	rm /etc/httpd/conf.d/my_kaltura.conf
	sed -i "1iUser $KALT_USER\nGroup $KALT_GROUP\n" $BASE_DIR/app/configurations/apache/my_kaltura_apiv3.conf
	ln -s $APP_CONF_DIR/apache/my_kaltura_apiv3.conf /etc/httpd/conf.d/
	/etc/init.d/httpd restart
	/etc/init.d/serviceBatchMgr.sh restart

}

install_sphinx()
{
	install_all_in_one
	cd $BASE_DIR
	rm /etc/cron.d/dwh_crontab || true
	cp crontab/kaltura_crontab crontab/kaltura_crontab.bak.`date +%d_%m_%y`
	cp crontab/kaltura_crontab.templ crontab/kaltura_crontab
	sed -i "s%@BASE_DIR@%$BASE_DIR%g;s%@APP_DIR@%$BASE_DIR/app%g;s%@PHP_BIN@%$PHP_BIN%g;s%@LOG_DIR@%$BASE_DIR/log%g" crontab/kaltura_crontab
	for i in reportUsageTrackingIfOptIn.php watch.batchMgr.sh dwh_plays_views_sync.sh send-usage-report.php;do  
		sed -i "s@\(.*$i.*\)@#commented out by $0 when configuring sphinx: \1@g" crontab/kaltura_crontab; 
	done
	for i in serviceBatchMgr.sh httpd;do
		/etc/init.d/$i stop
		chkconfig $i off
	done
	if [ "$DB1_HOST" != "localhost" ];then
		/etc/init.d/mysqld stop
		chkconfig mysqld off
	fi
	/etc/init.d/sphinx_watch.sh restart
	clear_host_from_scheduler
}

install_api()
{
	install_all_in_one
	cd $BASE_DIR
	rm /etc/cron.d/dwh_crontab || true
	cp crontab/kaltura_crontab crontab/kaltura_crontab.bak.`date +%d_%m_%y`
	cp crontab/kaltura_crontab.templ crontab/kaltura_crontab
	sed -i "s%@BASE_DIR@%$BASE_DIR%g;s%@APP_DIR@%$BASE_DIR/app%g;s%@PHP_BIN@%$PHP_BIN%g;s%@LOG_DIR@%$BASE_DIR/log%g" crontab/kaltura_crontab
	for i in reportUsageTrackingIfOptIn.php watch.batchMgr.sh dwh_plays_views_sync.sh send-usage-report.php watch.populate.sh;do  
		sed -i "s@\(.*$i.*\)@#commented out by $0 when configuring api: \1@g" crontab/kaltura_crontab; 
	done
	for i in serviceBatchMgr.sh watch.populate.sh serviceBatchMgr.sh;do
		/etc/init.d/$i stop
		chkconfig $i off
	done
	if [ "$DB1_HOST" != "localhost" ];then
		/etc/init.d/mysqld stop
		chkconfig mysqld off
	fi
	clear_host_from_scheduler

}

clear_host_from_scheduler()
{
	SQL="delete from scheduler where host='$KALTURA_FULL_VIRTUAL_HOST_NAME';"
	echo "$SQL"|mysql -h$DB1_HOST -u$DB1_USER -P$DB1_PORT -p$DB1_PASS

}
#reconfigure_host()
#{
#
#}

fix_hostname_values()
{
	if [ -n "$1" ];then
		BASE=$1
	else
		echo "Please provide the base dir for the Kaltura install:"
		read_BASE
	fi
	echo -e "We will now go through a set of questions to determine which hostname values need to be replaced on this node\nIf you do not wish to replace a certain role, just hit enter w/o inputting a value."
	echo "Who is our batch host for this machine?"
	read BATCH_NODENAME
	if [ -n "$BATCH_NODENAME" ];then
		echo "Setting batch hostname in configs to $BATCH_NODENAME.."
		echo "I also need a scheduler ID?"           
		read SCD_ID                    
		sed -i "s@^\(id\s*=\s*\)1\$@\1 $SCD_ID@" $APP_CONF_DIR/batch.ini
		sed -i "s@^\(hostName\s*=\).*@\1 $DEST_HOST@g" $APP_CONF_DIR/batch.ini
		sed -i "s@^\(serviceUrl\s*=\).*@\1 http://$DEST_HOST@g" $APP_CONF_DIR/batch.ini
	fi
	echo "Who is our Sphinx host for this machine?"
	read SPHINX_NODENAME
	if [ -n "$SPHINX_NODENAME" ];then
		echo "Setting Sphinx hostname in configs to $SPHINX_NODENAME.."
	fi
	echo "Who is our MySQL host for this machine?"
	read MYSQL_NODENAME
	if [ -n "$MYSQL_NODENAME" ];then
		echo "Setting MySQL hostname in configs to $MYSQL_NODENAME.."
	fi

}

# THIS SHOULD BE RUN AS PART OF THE PACKAGING PROCESS, BUT FOR NOW...
remove_exec_bit()
{
	for i in "*.xml" "*.template" "*.ttf" "*.xsl" "*.xsd" "*.yml" "*.smil" "*.srt" "*.sql" "*.orig" "*.patch" "*.po" "*.pdf" "*.otf" "*.txt" "*.php" "*.phtml" "*.project" "*.png" "*.properties" "*.sample" "*.swf" "*.sf" "*.swz" "*.uad" "*.prefs" "*.psd" "*.rvmrc" "*.sln" "*.ini" "*.log" ;do
		find $KALT_PREFIX -iname "$i" -exec chmod 644 {} \;
	done 
}

set_selinux_permissive()
{
        STATUS=`getenforce`
        if [ $STATUS = 'Enforcing' ];then
                echo "Setting SELinux to permissive mode.."
                setenforce Permissive
                sed -i 's@SELINUX=enforcing@SELINUX=permissive@' /etc/selinux/config
        fi
}


set_php_ini()
{
	echo "Setting request_order = CGP in php.ini"
	# if we have a scandir
	if [ -d /etc/php.d ];then
		INI_FILE=/etc/php.d/kaltura.ini
		echo 'request_order = "CGP"' >> $INI_FILE
	else
		INI_FILE=/etc/php.ini
		sed -i 's@request_order\s*=\s*.*@request_order = "CGP"@' $INI_FILE
	fi
	echo "upload_tmp_dir = $BASE_DIR/web/tmp" >> $INI_FILE
}
fix_permissions()
{
	echo "Changing file permissions.."
	find $BASE_DIR -name "cache" -exec chown -R $KALT_USER.$KALT_GROUP {} \;
	find $BASE_DIR -name "tmp" -exec chown -R $KALT_USER.$KALT_GROUP {} \;
	find $BASE_DIR -name "log" -exec chown -R $KALT_USER.$KALT_GROUP {} \;
	chown root.$KALT_GROUP $BASE_DIR/app/configurations/admin.ini $BASE_DIR/app/configurations/local.ini $BASE_DIR/app/infra/kConf.php
	find $BASE_DIR/app/configurations -name "*.ini" -exec chown root.$KALT_GROUP {} \;
	find $BASE_DIR/app/configurations -name "*.ini" -o -name "*.conf" -exec chmod 640 {} \;
	mkdir -p $PENTAHO_DIR/pdi/plugins $BASE_DIR/web/content $BASE_DIR/web/conversions $BASE_DIR/app/batch
	chown -R $KALT_USER.$KALT_GROUP /usr/local/pentaho/pdi/plugins $BASE_DIR/web/content $BASE_DIR/web/conversions $BASE_DIR/app/batch
	sed -i 's@ root @ kaltura @' $BASE_DIR/crontab/kaltura_crontab
	sed -i 's@kaltura /usr/sbin/logrotate@root /usr/sbin/logrotate@' $BASE_DIR/crontab/kaltura_crontab
}

configure_apache()
{
	echo "Configing Apache to run as the kaltura user.."
	sed -i "s@^User@#User@" /etc/httpd/conf/httpd.conf
	sed -i "s@^Group@#Group@" /etc/httpd/conf/httpd.conf
	sed -i "1iUser $KALT_USER\nGroup $KALT_GROUP\n" $BASE_DIR/app/configurations/apache/my_kaltura.conf
	if [ -d /var/lib/php/session ];then chown $KALT_USER.$KALT_GROUP /var/lib/php/session;fi
	echo "Linking /opt/kaltura/app/configurations/apache/my_kaltura.conf to /etc/httpd/conf.d.."
	rm /etc/httpd/conf.d/my_kaltura.conf 2>/dev/null||true
	ln -s $BASE_DIR/app/configurations/apache/my_kaltura.conf /etc/httpd/conf.d/
	/etc/init.d/httpd restart
}

set_serial()
{
	sed -i 's@^kaltura_activation_key\s*=\s*@kaltura_activation_key = YjI2MzgwMmUyMDA0ZTA1ODg1MWFjYWJiNDExMTEzNWV8MXxuZXZlcnww@' $BASE_DIR/app/configurations/local.ini
}

configure_dwh()
{
	echo "Configuring DWH.."
	mkdir -p /opt/kaltura/web/logs
	KETTLE_CONF=$BASE_DIR/dwh/.kettle/kettle.properties
	sed -i "s@EventsLogsDir\s*=\s*.*@EventsLogsDir = $BASE_DIR/web/logs@" $KETTLE_CONF
	sed -i "s@EventsWildcard\s*=\s*.*@EventsWildcard = kaltura.*_apache_access.log-.*@" $KETTLE_CONF
	# fix paths in the DWH tree. There are many so listing all files explicitely is annoying. This should be fixed for Gemini.
	#find $BASE_DIR/dwh/ -type f -exec sed -i 's@/usr/local/pentaho@/opt/kaltura/dwh/pentaho@g' {} \;
}
create_partner()
{
	echo "Creating test partner.."
	SPHINX_DSN=`grep datasources.sphinx.connection.dsn "$APP_CONF_DIR/db.ini"|awk -F "= " '{print $2}'`
	SPHINX_BOX=`echo $SPHINX_DSN |sed 's/.*host=\(.*\);port=.*/\1/'`
	SPHINX_PORT=`echo $SPHINX_DSN |sed 's/.*host=.*;port=\(.*\);"/\1/'`
	set +e
	exec 3<>/dev/tcp/$SPHINX_BOX/$SPHINX_PORT
	set -e
	if [ $? -ne 0 ];then
	    echo "Waiting for 15 seconds, giving Sphinx [$SPHINX_BOX] a chance to open a listener on $SPHINX_PORT.."
	    sleep 15
	fi
	set +e
	exec 3<>/dev/tcp/$SPHINX_BOX/$SPHINX_PORT
	set -e
	if [ $? -eq 0 ];then
	    ADMIN_SECRET=`echo "select admin_secret from partner where id=-2;" |mysql -u"$DB1_USER" -p"$DB1_PASS" -P$DB1_PORT $DB1_NAME |sed '1,1d'`
	    TEST_PARTNER_ID=`php $DIR_NAME/create_partner.php $ADMIN_SECRET $TEST_PARTNER_EMAIL $TEST_PARTNER_PASSWD `
	else
	    echo "Sphinx seems to be down :( I will not create a partner."
	fi
	echo $TEST_PARTNER_ID
}

upload_assets()
{
	TEST_PARTNER_ID=$1
    	echo 'Uploading sample content';
	SPHINX_DSN=`grep datasources.sphinx.connection.dsn "$APP_CONF_DIR/db.ini"|awk -F "= " '{print $2}'`
	SPHINX_BOX=`echo $SPHINX_DSN |sed 's/.*host=\(.*\);port=.*/\1/'`
	SPHINX_PORT=`echo $SPHINX_DSN |sed 's/.*host=.*;port=\(.*\);"/\1/'`
	set +e
	exec 3<>/dev/tcp/$SPHINX_BOX/$SPHINX_PORT
	set -e
	if [ $? -ne 0 ];then
	    echo "Waiting for 15 seconds, giving Sphinx [$SPHINX_BOX] a chance to open a listener on $SPHINX_PORT.."
	    sleep 15
	fi
	set +e
	exec 3<>/dev/tcp/$SPHINX_BOX/$SPHINX_PORT
	set -e
	if [ $? -eq 0 ];then
	    php $DIR_NAME/upload_csv.php $TEST_PARTNER_ID 'http://localhost' `echo "select admin_secret from partner where id=$TEST_PARTNER_ID;" |mysql -u"$DB1_USER" -p"$DB1_PASS" -P$DB1_PORT $DB1_NAME |sed '1,1d'` $TEST_PARTNER_EMAIL 
	else
	    echo "Sphinx seems to be down :( I will not create a partner."
	fi
	

}
create_mysql_user()
{
	SQL="select user from mysql.user where user='$KALT_USER';"
	KALT_USER_EXISTS=`echo $SQL|mysql --skip-column-names -h$DB1_HOST -u$DB1_USER -P$DB1_PORT -p$DB1_PASS`
	if [ -n "$KALT_USER_EXISTS" ];then
		echo "MySQL user $KALT_USER already exists, skipping creation."
		return 0
	fi
	KALT_MYSQL_PASSWD=`< /dev/urandom tr -dc A-Za-z0-9_ | head -c15`
	SQL="create user $KALT_USER@'%' identified by '$KALT_MYSQL_PASSWD';GRANT ALL PRIVILEGES ON *.* TO $KALT_USER@'%' WITH GRANT OPTION; Flush Privileges;"
	echo "$SQL"|mysql -h$DB1_HOST -u$DB1_USER -P$DB1_PORT -p$DB1_PASS
	if [ $? -eq 0 ];then
		sed -i "s@^DB1_USER\s*=\s*.*@DB1_USER=$KALT_USER@g" $DIR_NAME/user_input.ini
		sed -i "s@^DB1_PASS\s*=\s*.*@DB1_PASS=$KALT_MYSQL_PASSWD@g" $DIR_NAME/user_input.ini
	fi
}

configure_red5()
{
        if [ "$RED5_INSTALL" = 'y' -o "$RED5_INSTALL" = 'yes' ];then
                UI_CONF=`echo "select conf_file_path from ui_conf where tags like '%kmc_uploadWebCam%';"|mysql -u$DB1_USER -P$DB1_PORT -p$DB1_PASS $DB1_NAME -h$DB1_HOST --skip-column-names`
                sed -i "s@{HOST_NAME}@$RED5_HOST@g" "$BASE_DIR/web/$UI_CONF"
        fi
}

DIR_NAME=`dirname $0`
USER_INI_PATH=$DIR_NAME/user_input.ini
if [ -r "$USER_INI_PATH" ];then
	. "$USER_INI_PATH"
else
	echo "Couldn't read $USER_INI_PATH, make sure its there :("
	exit 1
fi
verify_user_input
if [ -n "$BASE_DIR" ];then
	KALT_PREFIX=$BASE_DIR
else
	KALT_PREFIX=/opt/kaltura
fi
APP_CONF_DIR="$BASE_DIR/app/configurations"

export_mysql_kalt_db()
{
	$DIR_NAME/export_db.sh $DB1_NAME $DB1_USER $DB1_PASS $DB1_PORT /tmp/${DB1_NAME}_`date +%d%m%y_%H%M`
}

disable_monitoring_tab()
{
    sed -i 's@^access.monitoring = SYSTEM_ADMIN_SYSTEM_MONITOR@;access.monitoring = SYSTEM_ADMIN_SYSTEM_MONITOR@g' "$BASE_DIR/app/configurations/admin.ini" 
}


